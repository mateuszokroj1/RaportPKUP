#include <iostream>
#include <direct.h>

#include <git2.h>

int main()
{
	git_libgit2_init();

	git_repository *repo = nullptr;

	{
		if (git_repository_open(&repo, "E:/sources/raportpkup") != 0)
		{
			const auto e = git_error_last();
			std::cout << "Error: " << e->klass << ", " << e->message;

			return 1;
		}

	}

	{
		git_branch_iterator *it = nullptr;
		git_branch_iterator_new(&it, repo, git_branch_t::GIT_BRANCH_REMOTE);

		git_reference *ref = nullptr;
		git_branch_t type;
		while (git_branch_next(&ref, &type, it) != 0)
		{ // multi threaded rev walks
			const char *name = git_reference_name(ref);
	
				git_revwalk *revwalk = nullptr;
				git_revwalk_new(&revwalk, repo);

				git_revwalk_push_ref(revwalk, name);
				delete name;
				git_revwalk_sorting(revwalk, GIT_SORT_TIME | GIT_SORT_REVERSE);

				git_oid id;
				if (git_revwalk_next(&id, revwalk) != 0)
				{
					
				}

				git_revwalk_free(revwalk);

			git_reference_free(ref);
		}

		git_branch_iterator_free(it);
	}

	git_repository_free(repo);
	git_libgit2_shutdown();
	return 0;
}
